// ALU Module
module ALU(
    input [3:0] A, B,
    input [2:0] sel,
    output reg [3:0] result
);

always @(*) begin
    case(sel)
        3'b000: result = A + B;       // Addition
        3'b001: result = A - B;       // Subtraction
        3'b010: result = A & B;       // AND
        3'b011: result = A | B;       // OR
        3'b100: result = ~A;          // NOT A
        default: result = 4'b0000;    // Default to 0
    endcase
end

endmodule


module tb_ALU();

reg [3:0] A, B;
reg [2:0] sel;
wire [3:0] result;

ALU uut (
    .A(A),
    .B(B),
    .sel(sel),
    .result(result)
);

initial begin
    // Display header
    $display("A    B    sel  | Result");
    $display("-----------------------");

    A = 4'b0011; B = 4'b0001; sel = 3'b000; #10; // 3 + 1
    $display("%b  %b  %b | %b", A, B, sel, result);

    A = 4'b0101; B = 4'b0010; sel = 3'b001; #10; // 5 - 2
    $display("%b  %b  %b | %b", A, B, sel, result);

    A = 4'b1100; B = 4'b1010; sel = 3'b010; #10; // AND
    $display("%b  %b  %b | %b", A, B, sel, result);

    A = 4'b1100; B = 4'b1010; sel = 3'b011; #10; // OR
    $display("%b  %b  %b | %b", A, B, sel, result);

    A = 4'b1010; B = 4'b0000; sel = 3'b100; #10; // NOT A
    $display("%b  %b  %b | %b", A, B, sel, result);

    $finish;
end

endmodule
